name: Terraform Plan

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Terraform environment directory (e.g., env/product-a/dev)'
        required: true
        type: string
  pull_request:
    paths:
      - 'env/**'
      - 'modules/**'

env:
  TF_VERSION: '1.5.7'
  ENVIRONMENT_PATH: ${{ github.event.inputs.environment || 'env/204278-ls2/dev' }}
  datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
  datadog_app_key: ${{ secrets.DATADOG_APP_KEY }}

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false  # Important for capturing output

      - name: Configure JFrog credentials
        run: |
          mkdir -p ~/.terraform.d
          cat > ~/.terraform.d/credentials.tfrc.json <<EOF
          {
            "credentials": {
              "trialviki.jfrog.io": {
                "token": "${{ secrets.JFROG_ACCESS_TOKEN }}"
              }
            }
          }
          EOF

      - name: Set Terraform Workspace Name
        id: set-workspace
        run: |
          WORKSPACE_NAME=$(echo "${{ env.ENVIRONMENT_PATH }}" | cut -d'/' -f2- | tr '/' '-')
          echo "WORKSPACE_NAME=$WORKSPACE_NAME" >> $GITHUB_ENV
          echo "workspace=$WORKSPACE_NAME" >> $GITHUB_OUTPUT
          echo "Using workspace: $WORKSPACE_NAME"

      - name: Terraform Init
        id: init
        working-directory: ${{ env.ENVIRONMENT_PATH }}
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE_NAME }}
        run: terraform init -reconfigure
        continue-on-error: true

      - name: Select or Create Terraform Workspace
        working-directory: ${{ env.ENVIRONMENT_PATH }}
        run: |
          terraform workspace select "${{ env.WORKSPACE_NAME }}" || terraform workspace new "${{ env.WORKSPACE_NAME }}"

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.ENVIRONMENT_PATH }}
        run: |
          terraform plan -out=tfplan -input=false -no-color | tee plan_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Generate Plan Summary
        id: plan-summary
        working-directory: ${{ env.ENVIRONMENT_PATH }}
        run: |
          # Get the human-readable plan output
          PLAN_OUTPUT=$(terraform show -no-color tfplan)
          
          # Save to file for artifact
          echo "$PLAN_OUTPUT" > plan_readable.txt
          
          # Extract summary statistics
          ADD=$(echo "$PLAN_OUTPUT" | grep -oP 'Plan: \K\d+(?= to add)' || echo "0")
          CHANGE=$(echo "$PLAN_OUTPUT" | grep -oP '\d+(?= to change)' || echo "0")
          DESTROY=$(echo "$PLAN_OUTPUT" | grep -oP '\d+(?= to destroy)' || echo "0")
          
          echo "add=$ADD" >> $GITHUB_OUTPUT
          echo "change=$CHANGE" >> $GITHUB_OUTPUT
          echo "destroy=$DESTROY" >> $GITHUB_OUTPUT
          
          # Truncate plan for comment if too large (GitHub has 65536 char limit)
          if [ ${#PLAN_OUTPUT} -gt 60000 ]; then
            PLAN_TRUNCATED=$(echo "$PLAN_OUTPUT" | head -c 60000)
            echo "PLAN<<EOF" >> $GITHUB_OUTPUT
            echo "$PLAN_TRUNCATED" >> $GITHUB_OUTPUT
            echo -e "\n\n... (output truncated, see artifacts for full plan)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "truncated=true" >> $GITHUB_OUTPUT
          else
            echo "PLAN<<EOF" >> $GITHUB_OUTPUT
            echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "truncated=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.WORKSPACE_NAME }}
          path: |
            ${{ env.ENVIRONMENT_PATH }}/tfplan
            ${{ env.ENVIRONMENT_PATH }}/plan_readable.txt
            ${{ env.ENVIRONMENT_PATH }}/plan_output.txt
          retention-days: 30

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const plan = `${{ steps.plan-summary.outputs.PLAN }}`;
            const add = '${{ steps.plan-summary.outputs.add }}';
            const change = '${{ steps.plan-summary.outputs.change }}';
            const destroy = '${{ steps.plan-summary.outputs.destroy }}';
            const truncated = '${{ steps.plan-summary.outputs.truncated }}';
            const workspace = '${{ env.WORKSPACE_NAME }}';
            const envPath = '${{ env.ENVIRONMENT_PATH }}';
            const initStatus = '${{ steps.init.outcome }}';
            const planStatus = '${{ steps.plan.outcome }}';
            
            let statusEmoji = '‚úÖ';
            if (planStatus === 'failure') {
              statusEmoji = '‚ùå';
            } else if (destroy !== '0') {
              statusEmoji = '‚ö†Ô∏è';
            }
            
            const output = `## ${statusEmoji} Terraform Plan - \`${workspace}\`
            
            **Environment:** \`${envPath}\`
            **Terraform Version:** \`${{ env.TF_VERSION }}\`
            
            ### Plan Summary
            
            | Action | Count |
            |--------|-------|
            | ‚ûï Resources to Add | **${add}** |
            | üîÑ Resources to Change | **${change}** |
            | ‚ùå Resources to Destroy | **${destroy}** |
            
            **Init Status:** \`${initStatus}\`
            **Plan Status:** \`${planStatus}\`
            
            <details><summary>üìã Click to view full plan output</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            ${truncated === 'true' ? '> ‚ö†Ô∏è **Note:** Plan output was truncated. Download the artifact for the complete plan.\n' : ''}
            
            ---
            *Triggered by: @${{ github.actor }} | Workflow: \`${{ github.workflow }}\` | Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes(`Terraform Plan - \`${workspace}\``)
            );
            
            // Update existing comment or create new one
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Create Job Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          # Terraform Plan Results
          
          **Environment:** \`${{ env.ENVIRONMENT_PATH }}\`
          **Workspace:** \`${{ env.WORKSPACE_NAME }}\`
          **Terraform Version:** \`${{ env.TF_VERSION }}\`
          
          ## Summary
          - ‚ûï Add: **${{ steps.plan-summary.outputs.add }}**
          - üîÑ Change: **${{ steps.plan-summary.outputs.change }}**
          - ‚ùå Destroy: **${{ steps.plan-summary.outputs.destroy }}**
          
          ## Status
          - Init: \`${{ steps.init.outcome }}\`
          - Plan: \`${{ steps.plan.outcome }}\`
          
          [View full plan in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF

      - name: Check Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "::error::Terraform plan failed"
          exit 1