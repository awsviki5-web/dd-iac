name: Terraform Apply

on:
  push:
    branches:
      - main
    paths:
      - 'env/**'
      - 'modules/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Specific environment to apply (e.g., env/product-a/dev)'
        required: false
        type: string

env:
  TF_VERSION: '1.5.7'

jobs:
  detect-changes:
    name: Detect Changed Environments
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed environments
        id: set-matrix
        run: |
          if [ -n "${{ github.event.inputs.environment }}" ]; then
            # Manual trigger with specific environment
            ENVS=$(echo '["${{ github.event.inputs.environment }}"]')
          else
            # Auto-detect from commit
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
            ENVS=$(echo "$CHANGED_FILES" | grep '^env/' | cut -d'/' -f1-4 | sort -u | jq -R -s -c 'split("\n")[:-1]')
            
            # If modules changed, apply to all environments
            if [ "$ENVS" == "[]" ] && echo "$CHANGED_FILES" | grep -q '^modules/'; then
              ENVS=$(find env -name "main.tf" -type f | xargs dirname | jq -R -s -c 'split("\n")[:-1]')
            fi
          fi
          
          echo "matrix=$ENVS" >> $GITHUB_OUTPUT
          echo "Detected environments: $ENVS"

  terraform-apply:
    name: Apply - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      max-parallel: 1  # Apply one environment at a time
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure JFrog credentials
        run: |
          mkdir -p ~/.terraform.d
          cat > ~/.terraform.d/credentials.tfrc.json <<EOF
          {
            "credentials": {
              "your-jfrog-instance.jfrog.io": {
                "username": "${{ secrets.JFROG_USERNAME }}",
                "password": "${{ secrets.JFROG_PASSWORD }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        working-directory: ${{ matrix.environment }}
        run: terraform init
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.JFROG_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

      - name: Terraform Apply
        working-directory: ${{ matrix.environment }}
        run: |
          terraform apply -auto-approve -input=false
        env:
          TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
          TF_VAR_datadog_app_key: ${{ secrets.DATADOG_APP_KEY }}

      - name: Terraform Output
        working-directory: ${{ matrix.environment }}
        run: terraform output -json > outputs.json

      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: outputs-${{ hashFiles(matrix.environment) }}
          path: ${{ matrix.environment }}/outputs.json
          retention-days: 30

      - name: Notify Success
        if: success()
        run: |
          echo "✅ Successfully applied Terraform for ${{ matrix.environment }}"
          # Add Slack/Teams notification here if needed

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Failed to apply Terraform for ${{ matrix.environment }}"
          # Add Slack/Teams notification here if needed